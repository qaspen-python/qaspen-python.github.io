import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as e}from"./app-D8Yu_QJL.js";const p={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<p>We have predefined row_factories for fast usage.</p><h3 id="tuple-row" tabindex="-1"><a class="header-anchor" href="#tuple-row"><span>tuple_row</span></a></h3><p>Instead of dict you can return tuple as a result.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> psqlpy<span class="token punctuation">.</span>row_factories <span class="token keyword">import</span> tuple_row

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    conn_result <span class="token operator">=</span> <span class="token keyword">await</span> psql_pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        querystring<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f&quot;SELECT * FROM </span><span class="token interpolation"><span class="token punctuation">{</span>table_name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    tuple_res <span class="token operator">=</span> conn_result<span class="token punctuation">.</span>row_factory<span class="token punctuation">(</span>row_factory<span class="token operator">=</span>tuple_row<span class="token punctuation">)</span>

    <span class="token keyword">assert</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>tuple_res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="class-row" tabindex="-1"><a class="header-anchor" href="#class-row"><span>class_row</span></a></h3><p>You can build class from database result.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> dataclasses <span class="token keyword">import</span> dataclass

<span class="token keyword">from</span> psqlpy<span class="token punctuation">.</span>row_factories <span class="token keyword">import</span> class_row

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>


<span class="token decorator annotation punctuation">@dataclass</span>
<span class="token keyword">class</span> <span class="token class-name">ValidationTestModel</span><span class="token punctuation">:</span>
    <span class="token builtin">id</span><span class="token punctuation">:</span> <span class="token builtin">int</span>
    name<span class="token punctuation">:</span> <span class="token builtin">str</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    conn_result <span class="token operator">=</span> <span class="token keyword">await</span> psql_pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        querystring<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f&quot;SELECT * FROM </span><span class="token interpolation"><span class="token punctuation">{</span>table_name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    tuple_res <span class="token operator">=</span> conn_result<span class="token punctuation">.</span>row_factory<span class="token punctuation">(</span>row_factory<span class="token operator">=</span>class_row<span class="token punctuation">(</span>ValidationTestModel<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">assert</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>tuple_res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ValidationTestModel<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)]))}const r=s(p,[["render",o],["__file","predefined_row_factories.html.vue"]]),u=JSON.parse('{"path":"/usage/row_factories/predefined_row_factories.html","title":"Predefined row factories","lang":"en-US","frontmatter":{"title":"Predefined row factories","description":"We have predefined row_factories for fast usage. tuple_row Instead of dict you can return tuple as a result. class_row You can build class from database result.","head":[["meta",{"property":"og:url","content":"https://psqlpy-python.github.io/usage/row_factories/predefined_row_factories.html"}],["meta",{"property":"og:site_name","content":"PSQLPy"}],["meta",{"property":"og:title","content":"Predefined row factories"}],["meta",{"property":"og:description","content":"We have predefined row_factories for fast usage. tuple_row Instead of dict you can return tuple as a result. class_row You can build class from database result."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-09T13:56:49.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-09T13:56:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Predefined row factories\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-09T13:56:49.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"tuple_row","slug":"tuple-row","link":"#tuple-row","children":[]},{"level":3,"title":"class_row","slug":"class-row","link":"#class-row","children":[]}],"git":{"createdTime":1739109409000,"updatedTime":1739109409000,"contributors":[{"name":"chandr-andr (Kiselev Aleksandr)","email":"chandr@chandr.net","commits":1}]},"filePathRelative":"usage/row_factories/predefined_row_factories.md","localizedDate":"February 9, 2025","autoDesc":true,"excerpt":"<p>We have predefined row_factories for fast usage.</p>\\n<h3>tuple_row</h3>\\n<p>Instead of dict you can return tuple as a result.</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">from</span> psqlpy<span class=\\"token punctuation\\">.</span>row_factories <span class=\\"token keyword\\">import</span> tuple_row\\n\\n<span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>\\n\\n\\n<span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">:</span>\\n    conn_result <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> psql_pool<span class=\\"token punctuation\\">.</span>execute<span class=\\"token punctuation\\">(</span>\\n        querystring<span class=\\"token operator\\">=</span><span class=\\"token string-interpolation\\"><span class=\\"token string\\">f\\"SELECT * FROM </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>table_name<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">)</span>\\n    tuple_res <span class=\\"token operator\\">=</span> conn_result<span class=\\"token punctuation\\">.</span>row_factory<span class=\\"token punctuation\\">(</span>row_factory<span class=\\"token operator\\">=</span>tuple_row<span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">assert</span> <span class=\\"token builtin\\">isinstance</span><span class=\\"token punctuation\\">(</span>tuple_res<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">tuple</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>"}');export{r as comp,u as data};
