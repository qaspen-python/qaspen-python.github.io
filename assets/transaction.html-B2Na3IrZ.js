import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as e,d as s,e as a,b as o,r as c,o as l}from"./app-D8Yu_QJL.js";const r={},u={href:"https://docs.rs/tokio-postgres/latest/tokio_postgres/#pipelining",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.postgresql.org/docs/current/sql-savepoint.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.postgresql.org/docs/current/sql-rollback.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.postgresql.org/docs/current/sql-savepoint.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.postgresql.org/docs/current/sql-savepoint.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.postgresql.org/docs/current/plpgsql-cursors.html",target:"_blank",rel:"noopener noreferrer"};function h(y,n){const t=c("ExternalLinkIcon");return l(),i("div",null,[n[17]||(n[17]=e(`<p><code>Transaction</code> object represents <code>PostgreSQL</code> transaction. There are two ways of how we can work with transactions on <code>PSQLPy</code> side.</p><h3 id="transaction-parameters" tabindex="-1"><a class="header-anchor" href="#transaction-parameters"><span>Transaction parameters</span></a></h3><ul><li><code>isolation_level</code>: level of isolation. Default how it is in PostgreSQL.</li><li><code>read_variant</code>: configure read variant of the transaction. Default how it is in PostgreSQL.</li><li><code>deferrable</code>: configure deferrable of the transaction. Default how it is in PostgreSQL.</li></ul><h3 id="control-transaction-fully-on-your-own" tabindex="-1"><a class="header-anchor" href="#control-transaction-fully-on-your-own"><span>Control transaction fully on your own.</span></a></h3><p>First of all, you can get transaction object only from connection object.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> psqlpy <span class="token keyword">import</span> ConnectionPool


db_pool<span class="token punctuation">:</span> Final <span class="token operator">=</span> ConnectionPool<span class="token punctuation">(</span>
    dsn<span class="token operator">=</span><span class="token string">&quot;postgres://postgres:postgres@localhost:5432/postgres&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    transaction <span class="token operator">=</span> connection<span class="token punctuation">.</span>transaction<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After this you need to start you transaction or in <code>PostgreSQL</code> terms you need to BEGIN it.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    transaction <span class="token operator">=</span> connection<span class="token punctuation">.</span>transaction<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>begin<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So, after these manipulations you are ready to make you first query with the transaction.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        <span class="token string">&quot;INSERT INTO users (id, username) VALUES ($1, $2)&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&quot;100&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Alex&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Good! We&#39;ve inserted our first row, but if we won&#39;t commit the transaction all changes will discard.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>We need to commit changes.</p></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So, now everything is fine, changes are committed. But you can say that it&#39;s too complicated and you are right! We have an alternative way to handle <code>begin()</code> and <code>commit()</code> automatically.</p><h3 id="control-transaction-with-async-context-manager" tabindex="-1"><a class="header-anchor" href="#control-transaction-with-async-context-manager"><span>Control transaction with async context manager.</span></a></h3><p>There is the previous example but it is rewritten with use of async context manager.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> psqlpy <span class="token keyword">import</span> ConnectionPool


db_pool<span class="token punctuation">:</span> Final <span class="token operator">=</span> ConnectionPool<span class="token punctuation">(</span>
    dsn<span class="token operator">=</span><span class="token string">&quot;postgres://postgres:postgres@localhost:5432/postgres&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>startup<span class="token punctuation">(</span><span class="token punctuation">)</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">async</span> <span class="token keyword">with</span> connection<span class="token punctuation">.</span>transaction<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> transaction<span class="token punctuation">:</span>
        <span class="token comment"># begin() calls automatically</span>
        <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
            <span class="token string">&quot;INSERT INTO users (id, username) VALUES ($1, $2)&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token string">&quot;100&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Alex&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
        <span class="token comment"># commit() calls automatically.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Cool tip</p><p>If a query raises an error in our async context manager, <code>ROLLBACK</code> is executed automatically.</p></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>Transaction can be began only once, so if you have already called <code>begin()</code> manually then async context manager initialize will fail, you need to choose what to use.</p></div><h2 id="transaction-methods" tabindex="-1"><a class="header-anchor" href="#transaction-methods"><span>Transaction methods</span></a></h2><h3 id="begin" tabindex="-1"><a class="header-anchor" href="#begin"><span>Begin</span></a></h3><p>You can start a transaction manually.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>begin<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="commit" tabindex="-1"><a class="header-anchor" href="#commit"><span>Commit</span></a></h3><p>You can commit a transaction manually.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="execute" tabindex="-1"><a class="header-anchor" href="#execute"><span>Execute</span></a></h3><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters:</span></a></h4><ul><li><code>querystring</code>: Statement string.</li><li><code>parameters</code>: List of parameters for the statement string.</li><li><code>prepared</code>: Prepare statement before execution or not.</li></ul><p>You can execute any query directly from <code>Transaction</code> object. This method supports parameters, each parameter must be marked as <code>$&lt;number&gt;</code> (number starts with 1).</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">async</span> <span class="token keyword">with</span> connection<span class="token punctuation">.</span>transaction<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> transaction<span class="token punctuation">:</span>
        results<span class="token punctuation">:</span> QueryResult <span class="token operator">=</span> <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
            querystring<span class="token operator">=</span><span class="token string">&quot;SELECT * FROM users WHERE id = $1 and username = $2&quot;</span><span class="token punctuation">,</span>
            parameters<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&quot;Alex&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>

    dict_results<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> results<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="execute-batch" tabindex="-1"><a class="header-anchor" href="#execute-batch"><span>Execute Batch</span></a></h3><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters:</span></a></h4><ul><li><code>querystring</code>: querystrings separated by semicolons.</li></ul><p>Executes a sequence of SQL statements using the simple query protocol.</p><p>Statements should be separated by semicolons. If an error occurs, execution of the sequence will stop at that point. This is intended for use when, for example, initializing a database schema.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">async</span> <span class="token keyword">with</span> connection<span class="token punctuation">.</span>transaction<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> transaction<span class="token punctuation">:</span>
        <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>execute_batch<span class="token punctuation">(</span>
            <span class="token string">&quot;CREATE TABLE psqlpy (name VARCHAR); CREATE TABLE psqlpy2 (name VARCHAR);&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fetch" tabindex="-1"><a class="header-anchor" href="#fetch"><span>Fetch</span></a></h3><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2"><span>Parameters:</span></a></h4><ul><li><code>querystring</code>: Statement string.</li><li><code>parameters</code>: List of parameters for the statement string.</li><li><code>prepared</code>: Prepare statement before execution or not.</li></ul><p>The same as the <code>execute</code> method, for some people this naming is preferable.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">async</span> <span class="token keyword">with</span> connection<span class="token punctuation">.</span>transaction<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> transaction<span class="token punctuation">:</span>
        results<span class="token punctuation">:</span> QueryResult <span class="token operator">=</span> <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>fetch<span class="token punctuation">(</span>
            querystring<span class="token operator">=</span><span class="token string">&quot;SELECT * FROM users WHERE id = $1 and username = $2&quot;</span><span class="token punctuation">,</span>
            parameters<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&quot;Alex&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>

    dict_results<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> results<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="execute-many" tabindex="-1"><a class="header-anchor" href="#execute-many"><span>Execute Many</span></a></h3><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3"><span>Parameters:</span></a></h4><ul><li><code>querystring</code>: Statement string.</li><li><code>parameters</code>: List of list of parameters for the statement string.</li><li><code>prepared</code>: Prepare statements before execution or not.</li></ul><p>If you want to execute the same querystring, but with different parameters, <code>execute_many</code> is for you!</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">async</span> <span class="token keyword">with</span> connection<span class="token punctuation">.</span>transaction<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> transaction<span class="token punctuation">:</span>
        <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>execute_many<span class="token punctuation">(</span>
            <span class="token string">&quot;INSERT INTO users (name, age) VALUES ($1, $2)&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;boba&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;biba&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fetch-row" tabindex="-1"><a class="header-anchor" href="#fetch-row"><span>Fetch Row</span></a></h3><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4"><span>Parameters</span></a></h4><ul><li><code>querystring</code>: Statement string.</li><li><code>parameters</code>: List of list of parameters for the statement string.</li><li><code>prepared</code>: Prepare statements before execution or not.</li></ul><p>Sometimes you need to fetch only first row from the result.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Querystring must return exactly one result or an exception will be raised.</p></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">async</span> <span class="token keyword">with</span> connection<span class="token punctuation">.</span>transaction<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> transaction<span class="token punctuation">:</span>
        query_result<span class="token punctuation">:</span> SingleQueryResult <span class="token operator">=</span> <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>fetch_row<span class="token punctuation">(</span>
            <span class="token string">&quot;SELECT username FROM users WHERE id = $1&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
    dict_result<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span>Any<span class="token punctuation">,</span> Any<span class="token punctuation">]</span> <span class="token operator">=</span> query_result<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fetch-val" tabindex="-1"><a class="header-anchor" href="#fetch-val"><span>Fetch Val</span></a></h3><h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5"><span>Parameters</span></a></h4><ul><li><code>querystring</code>: Statement string.</li><li><code>parameters</code>: List of list of parameters for the statement string.</li><li><code>prepared</code>: Prepare statements before execution or not.</li></ul><p>If you need to retrieve some value not <code>QueryResult</code>.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Querystring must return exactly one result or an exception will be raised.</p></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">async</span> <span class="token keyword">with</span> connection<span class="token punctuation">.</span>transaction<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> transaction<span class="token punctuation">:</span>
        <span class="token comment"># this will be an int value</span>
        query_result_value <span class="token operator">=</span> <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>fetch_row<span class="token punctuation">(</span>
            <span class="token string">&quot;SELECT COUNT(*) FROM users WHERE id &gt; $1&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pipeline" tabindex="-1"><a class="header-anchor" href="#pipeline"><span>Pipeline</span></a></h3><h4 id="parameters-6" tabindex="-1"><a class="header-anchor" href="#parameters-6"><span>Parameters</span></a></h4><ul><li><code>queries</code>: list of tuple. It must have structure like</li><li><code>prepared</code>: should the querystring/querystrings be prepared before the request. By default any querystrings will be prepared.</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>queries <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM users WHERE name = $1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;some_name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&quot;SELECT 1&quot;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>prepared</code>: Prepare statements before execution or not.</li></ul><p>Execute queries in pipeline. Pipelining can improve performance in use cases in which multiple, independent queries need to be executed. In a traditional workflow, each query is sent to the server after the previous query completes. In contrast, pipelining allows the client to send all of the queries to the server up front, minimizing time spent by one side waiting for the other to finish sending data:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>            Sequential                               Pipelined
| Client         | Server          |    | Client         | Server          |
|----------------|-----------------|    |----------------|-----------------|
| send query 1   |                 |    | send query 1   |                 |
|                | process query 1 |    | send query 2   | process query 1 |
| receive rows 1 |                 |    | send query 3   | process query 2 |
| send query 2   |                 |    | receive rows 1 | process query 3 |
|                | process query 2 |    | receive rows 2 |                 |
| receive rows 2 |                 |    | receive rows 3 |                 |
| send query 3   |                 |
|                | process query 3 |
| receive rows 3 |                 |
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,66)),s("p",null,[s("a",u,[n[0]||(n[0]=a("Read more!")),o(t)])]),n[18]||(n[18]=e(`<p>Full example:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio

<span class="token keyword">from</span> psqlpy <span class="token keyword">import</span> ConnectionPool<span class="token punctuation">,</span> QueryResult


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    db_pool <span class="token operator">=</span> ConnectionPool<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>startup<span class="token punctuation">(</span><span class="token punctuation">)</span>

    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    transaction <span class="token operator">=</span> connection<span class="token punctuation">.</span>transaction<span class="token punctuation">(</span><span class="token punctuation">)</span>

    results<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span>QueryResult<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span>
        queries<span class="token operator">=</span><span class="token punctuation">[</span>
            <span class="token punctuation">(</span>
                <span class="token string">&quot;SELECT username FROM users WHERE id = $1&quot;</span><span class="token punctuation">,</span>
                <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span>
                <span class="token string">&quot;SELECT some_data FROM profiles&quot;</span><span class="token punctuation">,</span>
                <span class="token boolean">None</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span>
                <span class="token string">&quot;INSERT INTO users (username, id) VALUES ($1, $2)&quot;</span><span class="token punctuation">,</span>
                <span class="token punctuation">[</span><span class="token string">&quot;PSQLPy&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="create-savepoint" tabindex="-1"><a class="header-anchor" href="#create-savepoint"><span>Create Savepoint</span></a></h3><h4 id="parameters-7" tabindex="-1"><a class="header-anchor" href="#parameters-7"><span>Parameters:</span></a></h4><ul><li><code>savepoint_name</code>: name of the new savepoint.</li></ul>`,5)),s("p",null,[n[2]||(n[2]=a("Savepoint creation. ")),s("a",d,[n[1]||(n[1]=a("PostgreSQL docs")),o(t)])]),n[19]||(n[19]=e(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>create_savepoint<span class="token punctuation">(</span><span class="token string">&quot;my_savepoint&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>rollback_savepoint<span class="token punctuation">(</span><span class="token string">&quot;my_savepoint&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rollback" tabindex="-1"><a class="header-anchor" href="#rollback"><span>Rollback</span></a></h3>`,2)),s("p",null,[n[4]||(n[4]=a("Rollback the whole transaction. ")),s("a",k,[n[3]||(n[3]=a("PostgreSQL docs")),o(t)])]),n[20]||(n[20]=e(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rollback-savepoint" tabindex="-1"><a class="header-anchor" href="#rollback-savepoint"><span>Rollback Savepoint</span></a></h3><h4 id="parameters-8" tabindex="-1"><a class="header-anchor" href="#parameters-8"><span>Parameters:</span></a></h4><ul><li><code>savepoint_name</code>: name of the new savepoint.</li></ul>`,4)),s("p",null,[n[6]||(n[6]=a("Rollback to the specified savepoint. ")),s("a",v,[n[5]||(n[5]=a("PostgreSQL docs")),o(t)])]),n[21]||(n[21]=e(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    transaction <span class="token operator">=</span> connection<span class="token punctuation">.</span>transaction<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>create_savepoint<span class="token punctuation">(</span><span class="token string">&quot;my_savepoint&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>rollback_savepoint<span class="token punctuation">(</span><span class="token string">&quot;my_savepoint&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="release-savepoint" tabindex="-1"><a class="header-anchor" href="#release-savepoint"><span>Release Savepoint</span></a></h3><h4 id="parameters-9" tabindex="-1"><a class="header-anchor" href="#parameters-9"><span>Parameters:</span></a></h4><ul><li><code>savepoint_name</code>: name of the new savepoint.</li></ul>`,4)),s("p",null,[n[8]||(n[8]=a("Release savepoint. ")),s("a",m,[n[7]||(n[7]=a("PostgreSQL docs")),o(t)])]),n[22]||(n[22]=e(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    transaction <span class="token operator">=</span> connection<span class="token punctuation">.</span>transaction<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>create_savepoint<span class="token punctuation">(</span><span class="token string">&quot;my_savepoint&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>release_savepoint
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cursor" tabindex="-1"><a class="header-anchor" href="#cursor"><span>Cursor</span></a></h3><h4 id="parameters-10" tabindex="-1"><a class="header-anchor" href="#parameters-10"><span>Parameters</span></a></h4><ul><li><code>querystring</code>: Statement string.</li><li><code>parameters</code>: List of list of parameters for the statement string.</li><li><code>fetch_number</code>: rewrite default fetch_number. Default is 10.</li><li><code>scroll</code>: make cursor scrollable or not. Default is like in <code>PostgreSQL</code>.</li><li><code>prepared</code>: prepare querystring or not.</li></ul>`,4)),s("p",null,[n[10]||(n[10]=a("From ")),n[11]||(n[11]=s("code",null,"Transaction",-1)),n[12]||(n[12]=a(" you can create new ")),n[13]||(n[13]=s("code",null,"Cursor",-1)),n[14]||(n[14]=a(" object which represents cursor in the ")),n[15]||(n[15]=s("code",null,"PostgreSQL",-1)),n[16]||(n[16]=a(". ")),s("a",b,[n[9]||(n[9]=a("PostgreSQL Docs")),o(t)])]),n[23]||(n[23]=e(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    transaction <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span>transaction<span class="token punctuation">(</span><span class="token punctuation">)</span>

    cursor <span class="token operator">=</span> transaction<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span>
        querystring<span class="token operator">=</span><span class="token string">&quot;SELECT * FROM users WHERE username = $1&quot;</span><span class="token punctuation">,</span>
        parameters<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;Some_Username&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        fetch_number<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">await</span> cursor<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">async</span> <span class="token keyword">for</span> fetched_result <span class="token keyword">in</span> cursor<span class="token punctuation">:</span>
        dict_result<span class="token punctuation">:</span> List<span class="token punctuation">[</span>Dict<span class="token punctuation">[</span>Any<span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> fetched_result<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment"># do something with the result.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))])}const f=p(r,[["render",h],["__file","transaction.html.vue"]]),q=JSON.parse('{"path":"/components/transaction.html","title":"Transaction","lang":"en-US","frontmatter":{"title":"Transaction","description":"Transaction object represents PostgreSQL transaction. There are two ways of how we can work with transactions on PSQLPy side. Transaction parameters isolation_level: level of is...","head":[["meta",{"property":"og:url","content":"https://psqlpy-python.github.io/components/transaction.html"}],["meta",{"property":"og:site_name","content":"PSQLPy"}],["meta",{"property":"og:title","content":"Transaction"}],["meta",{"property":"og:description","content":"Transaction object represents PostgreSQL transaction. There are two ways of how we can work with transactions on PSQLPy side. Transaction parameters isolation_level: level of is..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-09T13:56:49.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-09T13:56:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Transaction\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-09T13:56:49.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"Transaction parameters","slug":"transaction-parameters","link":"#transaction-parameters","children":[]},{"level":3,"title":"Control transaction fully on your own.","slug":"control-transaction-fully-on-your-own","link":"#control-transaction-fully-on-your-own","children":[]},{"level":3,"title":"Control transaction with async context manager.","slug":"control-transaction-with-async-context-manager","link":"#control-transaction-with-async-context-manager","children":[]},{"level":2,"title":"Transaction methods","slug":"transaction-methods","link":"#transaction-methods","children":[{"level":3,"title":"Begin","slug":"begin","link":"#begin","children":[]},{"level":3,"title":"Commit","slug":"commit","link":"#commit","children":[]},{"level":3,"title":"Execute","slug":"execute","link":"#execute","children":[]},{"level":3,"title":"Execute Batch","slug":"execute-batch","link":"#execute-batch","children":[]},{"level":3,"title":"Fetch","slug":"fetch","link":"#fetch","children":[]},{"level":3,"title":"Execute Many","slug":"execute-many","link":"#execute-many","children":[]},{"level":3,"title":"Fetch Row","slug":"fetch-row","link":"#fetch-row","children":[]},{"level":3,"title":"Fetch Val","slug":"fetch-val","link":"#fetch-val","children":[]},{"level":3,"title":"Pipeline","slug":"pipeline","link":"#pipeline","children":[]},{"level":3,"title":"Create Savepoint","slug":"create-savepoint","link":"#create-savepoint","children":[]},{"level":3,"title":"Rollback","slug":"rollback","link":"#rollback","children":[]},{"level":3,"title":"Rollback Savepoint","slug":"rollback-savepoint","link":"#rollback-savepoint","children":[]},{"level":3,"title":"Release Savepoint","slug":"release-savepoint","link":"#release-savepoint","children":[]},{"level":3,"title":"Cursor","slug":"cursor","link":"#cursor","children":[]}]}],"git":{"createdTime":1739109409000,"updatedTime":1739109409000,"contributors":[{"name":"chandr-andr (Kiselev Aleksandr)","email":"chandr@chandr.net","commits":1}]},"filePathRelative":"components/transaction.md","localizedDate":"February 9, 2025","autoDesc":true,"excerpt":"<p><code>Transaction</code> object represents <code>PostgreSQL</code> transaction.\\nThere are two ways of how we can work with transactions on <code>PSQLPy</code> side.</p>\\n<h3>Transaction parameters</h3>\\n<ul>\\n<li><code>isolation_level</code>: level of isolation. Default how it is in PostgreSQL.</li>\\n<li><code>read_variant</code>: configure read variant of the transaction. Default how it is in PostgreSQL.</li>\\n<li><code>deferrable</code>: configure deferrable of the transaction. Default how it is in PostgreSQL.</li>\\n</ul>"}');export{f as comp,q as data};
