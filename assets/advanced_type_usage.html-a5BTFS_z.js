import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as t}from"./app-D8Yu_QJL.js";const o={};function p(c,n){return t(),e("div",null,n[0]||(n[0]=[a(`<p>Due to an unavailability to support all possible types in PostgreSQL, we have a way to encode Python types into PostgreSQL ones and decode wise versa.</p><p>This section has <code>Advanced</code> in the name because you&#39;ll need to work with raw bytes which can be difficult for some developers.</p><h2 id="pass-unsupported-type-into-postgresql" tabindex="-1"><a class="header-anchor" href="#pass-unsupported-type-into-postgresql"><span>Pass unsupported type into PostgreSQL</span></a></h2><p>If you are using some type that we don&#39;t support and want to insert it into PostgreSQL from PSQLPy, you must use <code>PyCustomType</code> class.</p><p>Let&#39;s assume we have table <code>for_test</code> in the database and <code>PSQLPy</code> doesn&#39;t support (only for demonstration) <code>VARCHAR</code> type:</p><table><thead><tr><th style="text-align:center;">database type</th><th style="text-align:center;">database column name</th></tr></thead><tbody><tr><td style="text-align:center;">VARCHAR</td><td style="text-align:center;">nickname</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Final

<span class="token keyword">from</span> psqlpy <span class="token keyword">import</span> ConnectionPool
<span class="token keyword">from</span> psqlpy<span class="token punctuation">.</span>extra_types <span class="token keyword">import</span> PyCustomType


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># It uses default connection parameters</span>
    db_pool<span class="token punctuation">:</span> Final <span class="token operator">=</span> ConnectionPool<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        <span class="token string">&quot;INSERT INTO for_test (nickname) VALUES ($1)&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>PyCustomType<span class="token punctuation">(</span><span class="token string">b&quot;SomeDataInBytes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    db_pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here we pass <code>PyCustomType</code> into the parameters. It accepts only bytes.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>You must make bytes passed into <code>PyCustomType</code> readable for <code>PostgreSQL</code>. If bytes will be wrong, you will get an exception.</p></div><h2 id="decode-unsupported-type-from-postgresql" tabindex="-1"><a class="header-anchor" href="#decode-unsupported-type-from-postgresql"><span>Decode unsupported type from PostgreSQL</span></a></h2><p>When you retrieve some data from the <code>PostgreSQL</code> there are can be data types that we don&#39;t support yet. To deal with this situation, you can use <code>custom_decoders</code> parameter in <code>result()</code> and <code>as_class()</code> methods.</p><p>Let&#39;s assume we have table <code>for_test</code> in the database and <code>PSQLPy</code> doesn&#39;t support (only for demonstration) <code>VARCHAR</code> type:</p><table><thead><tr><th style="text-align:center;">database type</th><th style="text-align:center;">database column name</th></tr></thead><tbody><tr><td style="text-align:center;">VARCHAR</td><td style="text-align:center;">nickname</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Final<span class="token punctuation">,</span> Any

<span class="token keyword">from</span> psqlpy <span class="token keyword">import</span> ConnectionPool<span class="token punctuation">,</span> QueryResult
<span class="token keyword">from</span> psqlpy<span class="token punctuation">.</span>extra_types <span class="token keyword">import</span> PyCustomType


<span class="token keyword">def</span> <span class="token function">nickname_decoder</span><span class="token punctuation">(</span>bytes_from_psql<span class="token punctuation">:</span> <span class="token builtin">bytes</span> <span class="token operator">|</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> bytes_from_psql<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> bytes_from_psql <span class="token keyword">else</span> <span class="token boolean">None</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># It uses default connection parameters</span>
    db_pool<span class="token punctuation">:</span> Final <span class="token operator">=</span> ConnectionPool<span class="token punctuation">(</span><span class="token punctuation">)</span>

    result<span class="token punctuation">:</span> QueryResult <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        <span class="token string">&quot;SELECT * FROM for_test&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>PyCustomType<span class="token punctuation">(</span><span class="token string">b&quot;SomeDataInBytes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>

    parsed_result<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">.</span>result<span class="token punctuation">(</span>
        custom_decoders<span class="token operator">=</span><span class="token punctuation">{</span>
            <span class="token string">&quot;nickname&quot;</span><span class="token punctuation">:</span> nickname_decoder<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    db_pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>Rules about <code>custom_decoders</code> parameter:</p><ul><li>The key of the dict must be the name of the field on which you want to apply the decode function.</li><li>If you use aliases for the result field name, you must specify the alias.</li><li>The key of the dict must be in <strong>lowercase</strong>.</li></ul></div>`,15)]))}const d=s(o,[["render",p],["__file","advanced_type_usage.html.vue"]]),r=JSON.parse(`{"path":"/usage/types/advanced_type_usage.html","title":"Advanced Type Usage","lang":"en-US","frontmatter":{"title":"Advanced Type Usage","description":"Due to an unavailability to support all possible types in PostgreSQL, we have a way to encode Python types into PostgreSQL ones and decode wise versa. This section has Advanced ...","head":[["meta",{"property":"og:url","content":"https://psqlpy-python.github.io/usage/types/advanced_type_usage.html"}],["meta",{"property":"og:site_name","content":"PSQLPy"}],["meta",{"property":"og:title","content":"Advanced Type Usage"}],["meta",{"property":"og:description","content":"Due to an unavailability to support all possible types in PostgreSQL, we have a way to encode Python types into PostgreSQL ones and decode wise versa. This section has Advanced ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-09T13:56:49.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-09T13:56:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Advanced Type Usage\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-09T13:56:49.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Pass unsupported type into PostgreSQL","slug":"pass-unsupported-type-into-postgresql","link":"#pass-unsupported-type-into-postgresql","children":[]},{"level":2,"title":"Decode unsupported type from PostgreSQL","slug":"decode-unsupported-type-from-postgresql","link":"#decode-unsupported-type-from-postgresql","children":[]}],"git":{"createdTime":1739109409000,"updatedTime":1739109409000,"contributors":[{"name":"chandr-andr (Kiselev Aleksandr)","email":"chandr@chandr.net","commits":1}]},"filePathRelative":"usage/types/advanced_type_usage.md","localizedDate":"February 9, 2025","autoDesc":true,"excerpt":"<p>Due to an unavailability to support all possible types in PostgreSQL, we have a way to encode Python types into PostgreSQL ones and decode wise versa.</p>\\n<p>This section has <code>Advanced</code> in the name because you'll need to work with raw bytes which can be difficult for some developers.</p>"}`);export{d as comp,r as data};
