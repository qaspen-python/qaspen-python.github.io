import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,d as n,b as p,a as c,e as s,w as e,r as i,o as k}from"./app-D8Yu_QJL.js";const m={},h={href:"https://postgresqlco.nf/doc/en/param/synchronous_commit/",target:"_blank",rel:"noopener noreferrer"};function v(b,a){const l=i("Tabs"),u=i("ExternalLinkIcon");return k(),d("div",null,[a[11]||(a[11]=n("p",null,[n("code",null,"Connection"),s(" object represents single connection to the "),n("code",null,"PostgreSQL"),s(". You must work with database within it. "),n("code",null,"Connection"),s(" get be made with "),n("code",null,"ConnectionPool().connection()"),s(" method.")],-1)),a[12]||(a[12]=n("h2",{id:"usage",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#usage"},[n("span",null,"Usage")])],-1)),p(l,{id:"6",data:[{id:"default"},{id:"async context manager"}]},{title0:e(({value:t,isActive:o})=>a[0]||(a[0]=[s("default")])),title1:e(({value:t,isActive:o})=>a[1]||(a[1]=[s("async context manager")])),tab0:e(({value:t,isActive:o})=>a[2]||(a[2]=[n("div",{class:"language-python line-numbers-mode","data-ext":"py","data-title":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"from"),s(" psqlpy "),n("span",{class:"token keyword"},"import"),s(` ConnectionPool

db_pool`),n("span",{class:"token punctuation"},":"),s(" Final "),n("span",{class:"token operator"},"="),s(" ConnectionPool"),n("span",{class:"token punctuation"},"("),s(`
    dsn`),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"postgres://postgres:postgres@localhost:5432/postgres"'),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token boolean"},"None"),n("span",{class:"token punctuation"},":"),s(`
    connection `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"await"),s(" db_pool"),n("span",{class:"token punctuation"},"."),s("connection"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:o})=>a[3]||(a[3]=[n("div",{class:"language-python line-numbers-mode","data-ext":"py","data-title":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"from"),s(" psqlpy "),n("span",{class:"token keyword"},"import"),s(` ConnectionPool

db_pool`),n("span",{class:"token punctuation"},":"),s(" Final "),n("span",{class:"token operator"},"="),s(" ConnectionPool"),n("span",{class:"token punctuation"},"("),s(`
    dsn`),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"postgres://postgres:postgres@localhost:5432/postgres"'),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token boolean"},"None"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token keyword"},"with"),s(" db_pool"),n("span",{class:"token punctuation"},"."),s("acquire"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"as"),s(" connection"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token comment"},"# connection is valid here"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
    `),n("span",{class:"token comment"},"# connection is invalid here"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[13]||(a[13]=c(`<h2 id="connection-methods" tabindex="-1"><a class="header-anchor" href="#connection-methods"><span>Connection methods</span></a></h2><h3 id="execute" tabindex="-1"><a class="header-anchor" href="#execute"><span>Execute</span></a></h3><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters:</span></a></h4><ul><li><code>querystring</code>: Statement string.</li><li><code>parameters</code>: List of parameters for the statement string.</li><li><code>prepared</code>: Prepare statement before execution or not.</li></ul><p>You can execute any query directly from <code>Connection</code> object. This method supports parameters, each parameter must be marked as <code>$&lt;number&gt;</code> in querystring (number starts with 1).</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    results<span class="token punctuation">:</span> QueryResult <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        <span class="token string">&quot;SELECT * FROM users WHERE id = $1 and username = $2&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&quot;Alex&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>

    dict_results<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> results<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="execute-batch" tabindex="-1"><a class="header-anchor" href="#execute-batch"><span>Execute Batch</span></a></h3><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters:</span></a></h4><ul><li><code>querystring</code>: querystrings separated by semicolons.</li></ul><p>Executes a sequence of SQL statements using the simple query protocol.</p><p>Statements should be separated by semicolons. If an error occurs, execution of the sequence will stop at that point. This is intended for use when, for example, initializing a database schema.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> connection<span class="token punctuation">.</span>execute_batch<span class="token punctuation">(</span>
        <span class="token string">&quot;CREATE TABLE psqlpy (name VARCHAR); CREATE TABLE psqlpy2 (name VARCHAR);&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fetch" tabindex="-1"><a class="header-anchor" href="#fetch"><span>Fetch</span></a></h3><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2"><span>Parameters:</span></a></h4><ul><li><code>querystring</code>: Statement string.</li><li><code>parameters</code>: List of parameters for the statement string.</li><li><code>prepared</code>: Prepare statement before execution or not.</li></ul><p>The same as the <code>execute</code> method, for some people this naming is preferable.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    results<span class="token punctuation">:</span> QueryResult <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span>fetch<span class="token punctuation">(</span>
        <span class="token string">&quot;SELECT * FROM users WHERE id = $1 and username = $2&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&quot;Alex&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>

    dict_results<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> results<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="execute-many" tabindex="-1"><a class="header-anchor" href="#execute-many"><span>Execute Many</span></a></h3><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3"><span>Parameters:</span></a></h4><ul><li><code>querystring</code>: Statement string.</li><li><code>parameters</code>: List of list of parameters for the statement string.</li><li><code>prepared</code>: Prepare statement before execution or not.</li></ul><p>This method supports parameters, each parameter must be marked as <code>$&lt;number&gt;</code> in querystring (number starts with 1). Atomicity is provided, so you don&#39;t need to worry about unsuccessful result, because there is a transaction used internally. This method returns nothing.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> connection<span class="token punctuation">.</span>execute_many<span class="token punctuation">(</span>
        <span class="token string">&quot;INSERT INTO users (name, age) VALUES ($1, $2)&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;boba&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;boba&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fetch-row" tabindex="-1"><a class="header-anchor" href="#fetch-row"><span>Fetch Row</span></a></h3><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4"><span>Parameters:</span></a></h4><ul><li><code>querystring</code>: Statement string.</li><li><code>parameters</code>: List of list of parameters for the statement string.</li><li><code>prepared</code>: Prepare statements before execution or not.</li></ul><p>Sometimes you need to fetch only first row from the result.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Querystring must return exactly one result or an exception will be raised.</p></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    query_result<span class="token punctuation">:</span> SingleQueryResult <span class="token operator">=</span> <span class="token keyword">await</span> transaction<span class="token punctuation">.</span>fetch_row<span class="token punctuation">(</span>
        <span class="token string">&quot;SELECT username FROM users WHERE id = $1&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    dict_result<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span>Any<span class="token punctuation">,</span> Any<span class="token punctuation">]</span> <span class="token operator">=</span> query_result<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fetch-val" tabindex="-1"><a class="header-anchor" href="#fetch-val"><span>Fetch Val</span></a></h3><h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5"><span>Parameters</span></a></h4><ul><li><code>querystring</code>: Statement string.</li><li><code>parameters</code>: List of list of parameters for the statement string.</li><li><code>prepared</code>: Prepare statements before execution or not.</li></ul><p>If you need to retrieve some value not <code>QueryResult</code>.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Querystring must return exactly one result or an exception will be raised.</p></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># this will be an int value</span>
    query_result_value <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span>fetch_row<span class="token punctuation">(</span>
        <span class="token string">&quot;SELECT COUNT(*) FROM users WHERE id &gt; $1&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transaction" tabindex="-1"><a class="header-anchor" href="#transaction"><span>Transaction</span></a></h3><p><code>Connection</code> is the only object that can be used to build <code>Transaction</code> object.</p><h4 id="parameters-6" tabindex="-1"><a class="header-anchor" href="#parameters-6"><span>Parameters:</span></a></h4>`,37)),n("ul",null,[a[8]||(a[8]=n("li",null,[n("code",null,"isolation_level"),s(": level of isolation. Default how it is in PostgreSQL.")],-1)),a[9]||(a[9]=n("li",null,[n("code",null,"read_variant"),s(": configure read variant of the transaction. Default how it is in PostgreSQL.")],-1)),a[10]||(a[10]=n("li",null,[n("code",null,"deferrable"),s(": configure deferrable of the transaction. Default how it is in PostgreSQL.")],-1)),n("li",null,[a[5]||(a[5]=n("code",null,"synchronous_commit",-1)),a[6]||(a[6]=s(": configure ")),n("a",h,[a[4]||(a[4]=s("synchronous_commit")),p(u)]),a[7]||(a[7]=s(" option for transaction. Default how it is in PostgreSQL."))])]),a[14]||(a[14]=c(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> psqlpy <span class="token keyword">import</span> IsolationLevel<span class="token punctuation">,</span> ReadVariant<span class="token punctuation">,</span> SynchronousCommit

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    transaction <span class="token operator">=</span> connection<span class="token punctuation">.</span>transaction<span class="token punctuation">(</span>
        isolation_level<span class="token operator">=</span>IsolationLevel<span class="token punctuation">.</span>Serializable<span class="token punctuation">,</span>
        read_variant<span class="token operator">=</span>ReadVariant<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">,</span>
        deferrable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
        synchronous_commit<span class="token operator">=</span>SynchronousCommit<span class="token punctuation">.</span>On<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="back-to-pool" tabindex="-1"><a class="header-anchor" href="#back-to-pool"><span>Back To Pool</span></a></h3><p>Returns connection to the pool. It&#39;s crucial to commit all transactions and close all cursor which are made from the connection. Otherwise, this method won&#39;t do anything useful.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>There is no need in this method if you use async context manager.</p></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    connection<span class="token punctuation">.</span>back_to_pool<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5))])}const f=r(m,[["render",v],["__file","connection.html.vue"]]),w=JSON.parse('{"path":"/components/connection.html","title":"Connection","lang":"en-US","frontmatter":{"title":"Connection","description":"Connection object represents single connection to the PostgreSQL. You must work with database within it. Connection get be made with ConnectionPool().connection() method. Usage ...","head":[["meta",{"property":"og:url","content":"https://psqlpy-python.github.io/components/connection.html"}],["meta",{"property":"og:site_name","content":"PSQLPy"}],["meta",{"property":"og:title","content":"Connection"}],["meta",{"property":"og:description","content":"Connection object represents single connection to the PostgreSQL. You must work with database within it. Connection get be made with ConnectionPool().connection() method. Usage ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-09T13:56:49.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-09T13:56:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Connection\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-09T13:56:49.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Usage","slug":"usage","link":"#usage","children":[]},{"level":2,"title":"Connection methods","slug":"connection-methods","link":"#connection-methods","children":[{"level":3,"title":"Execute","slug":"execute","link":"#execute","children":[]},{"level":3,"title":"Execute Batch","slug":"execute-batch","link":"#execute-batch","children":[]},{"level":3,"title":"Fetch","slug":"fetch","link":"#fetch","children":[]},{"level":3,"title":"Execute Many","slug":"execute-many","link":"#execute-many","children":[]},{"level":3,"title":"Fetch Row","slug":"fetch-row","link":"#fetch-row","children":[]},{"level":3,"title":"Fetch Val","slug":"fetch-val","link":"#fetch-val","children":[]},{"level":3,"title":"Transaction","slug":"transaction","link":"#transaction","children":[]},{"level":3,"title":"Back To Pool","slug":"back-to-pool","link":"#back-to-pool","children":[]}]}],"git":{"createdTime":1739109409000,"updatedTime":1739109409000,"contributors":[{"name":"chandr-andr (Kiselev Aleksandr)","email":"chandr@chandr.net","commits":1}]},"filePathRelative":"components/connection.md","localizedDate":"February 9, 2025","autoDesc":true,"excerpt":"<p><code>Connection</code> object represents single connection to the <code>PostgreSQL</code>. You must work with database within it.\\n<code>Connection</code> get be made with <code>ConnectionPool().connection()</code> method.</p>\\n<h2>Usage</h2>\\n\\n<h2>Connection methods</h2>\\n<h3>Execute</h3>\\n<h4>Parameters:</h4>"}');export{f as comp,w as data};
