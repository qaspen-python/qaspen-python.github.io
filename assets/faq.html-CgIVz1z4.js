import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a,d as p,e as s,b as i,w as c,r as l,o as r}from"./app-D8Yu_QJL.js";const u={};function d(k,n){const e=l("RouteLink");return r(),o("div",null,[n[3]||(n[3]=a(`<p>Here you can find most common questions and problems.</p><h3 id="limit-of-offset-isn-t-working" tabindex="-1"><a class="header-anchor" href="#limit-of-offset-isn-t-working"><span>LIMIT of OFFSET isn&#39;t working</span></a></h3><p>The main problem is PostgreSQL expects <code>LIMIT</code> and <code>OFFSET</code> to be BIGINT type but when you pass python <code>int</code> into <code>parameters</code> it converts to <code>INTEGER</code>.</p><h4 id="problem-and-solution" tabindex="-1"><a class="header-anchor" href="#problem-and-solution"><span>Problem and Solution:</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> psqlpy <span class="token keyword">import</span> ConnectionPool
<span class="token keyword">from</span> psqlpy<span class="token punctuation">.</span>extra_types <span class="token keyword">import</span> BigInt

<span class="token comment"># --- Incorrect ---</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    pool <span class="token operator">=</span> ConnectionPool<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        querystring<span class="token operator">=</span><span class="token string">&quot;SELECT * FROM users LIMIT $1 OFFSET $2&quot;</span><span class="token punctuation">,</span>
        parameters<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>


<span class="token comment"># --- Correct ---</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    pool <span class="token operator">=</span> ConnectionPool<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        querystring<span class="token operator">=</span><span class="token string">&quot;SELECT * FROM users LIMIT $1 OFFSET $2&quot;</span><span class="token punctuation">,</span>
        parameters<span class="token operator">=</span><span class="token punctuation">[</span>BigInt<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BigInt<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="where-in-clause-isn-t-working" tabindex="-1"><a class="header-anchor" href="#where-in-clause-isn-t-working"><span>WHERE IN clause isn&#39;t working</span></a></h3><p>Instead of using <code>WHERE &lt;field&gt; IN ()</code> clause you must use <code>WHERE &lt;field&gt; = ANY()</code>.</p><h4 id="problem-and-solution-1" tabindex="-1"><a class="header-anchor" href="#problem-and-solution-1"><span>Problem and Solution:</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> psqlpy <span class="token keyword">import</span> ConnectionPool

<span class="token comment"># --- Incorrect ---</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    pool <span class="token operator">=</span> ConnectionPool<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        querystring<span class="token operator">=</span><span class="token string">&quot;SELECT * FROM users WHERE id IN ($1)&quot;</span><span class="token punctuation">,</span>
        parameters<span class="token operator">=</span><span class="token punctuation">[</span>
            <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>


<span class="token comment"># --- Correct ---</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    pool <span class="token operator">=</span> ConnectionPool<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        querystring<span class="token operator">=</span><span class="token string">&quot;SELECT * FROM users WHERE id = ANY($1)&quot;</span><span class="token punctuation">,</span>
        parameters<span class="token operator">=</span><span class="token punctuation">[</span>
            <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="wrong-binary-data" tabindex="-1"><a class="header-anchor" href="#wrong-binary-data"><span>Wrong binary data</span></a></h3><p>Example error: <code>binary data has array element type 1043 (character varying) instead of expected 25 (text)</code>.</p><p>This exception tells you that you use wrong data type and you need to specify types explicitly.</p><p>For example, when we want to make <code>WHERE</code> clause with <code>ANY</code> and string values, we need to use <code>TextArray</code>, see example below:</p><h4 id="problem-and-solution-2" tabindex="-1"><a class="header-anchor" href="#problem-and-solution-2"><span>Problem and Solution:</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> psqlpy <span class="token keyword">import</span> ConnectionPool
<span class="token keyword">from</span> psqlpy<span class="token punctuation">.</span>extra_types <span class="token keyword">import</span> TextArray

<span class="token comment"># --- Incorrect ---</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    pool <span class="token operator">=</span> ConnectionPool<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        querystring<span class="token operator">=</span><span class="token string">&quot;SELECT * FROM users WHERE name = ANY($1)&quot;</span><span class="token punctuation">,</span>
        parameters<span class="token operator">=</span><span class="token punctuation">[</span>
            <span class="token punctuation">[</span><span class="token string">&quot;Foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Cafe&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>


<span class="token comment"># --- Correct ---</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    pool <span class="token operator">=</span> ConnectionPool<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        querystring<span class="token operator">=</span><span class="token string">&quot;SELECT * FROM users WHERE name = ANY($1)&quot;</span><span class="token punctuation">,</span>
        parameters<span class="token operator">=</span><span class="token punctuation">[</span>
            TextArray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;Foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Cafe&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cannot-insert-empty-array" tabindex="-1"><a class="header-anchor" href="#cannot-insert-empty-array"><span>Cannot insert empty ARRAY</span></a></h3>`,16)),p("p",null,[n[1]||(n[1]=s("To insert empty array use explicit ")),i(e,{to:"/usage/types/array_types.html"},{default:c(()=>n[0]||(n[0]=[s("Array Type")])),_:1}),n[2]||(n[2]=s("."))]),n[4]||(n[4]=a(`<h4 id="problem-and-solution-3" tabindex="-1"><a class="header-anchor" href="#problem-and-solution-3"><span>Problem and Solution:</span></a></h4><p>Let&#39;s assume that we have table <code>arr_table</code> with field <code>some_array</code> of <code>VARCHAR ARRAY</code> type. The main problem that we cannot determine the type of the empty sequence passed from Python side.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> psqlpy <span class="token keyword">import</span> ConnectionPool
<span class="token keyword">from</span> psqlpy<span class="token punctuation">.</span>extra_types <span class="token keyword">import</span> VarCharArray

<span class="token comment"># --- Incorrect ---</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    pool <span class="token operator">=</span> ConnectionPool<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        querystring<span class="token operator">=</span><span class="token string">&quot;INSERT INTO arr_table (some_array) VALUES ($1)&quot;</span><span class="token punctuation">,</span>
        parameters<span class="token operator">=</span><span class="token punctuation">[</span>
            <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>


<span class="token comment"># --- Correct ---</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    pool <span class="token operator">=</span> ConnectionPool<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        querystring<span class="token operator">=</span><span class="token string">&quot;INSERT INTO arr_table (some_array) VALUES ($1)&quot;</span><span class="token punctuation">,</span>
        parameters<span class="token operator">=</span><span class="token punctuation">[</span>
            VarCharArray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3))])}const b=t(u,[["render",d],["__file","faq.html.vue"]]),y=JSON.parse(`{"path":"/faq.html","title":"Frequently asked questions","lang":"en-US","frontmatter":{"title":"Frequently asked questions","description":"Here you can find most common questions and problems. LIMIT of OFFSET isn't working The main problem is PostgreSQL expects LIMIT and OFFSET to be BIGINT type but when you pass p...","head":[["meta",{"property":"og:url","content":"https://psqlpy-python.github.io/faq.html"}],["meta",{"property":"og:site_name","content":"PSQLPy"}],["meta",{"property":"og:title","content":"Frequently asked questions"}],["meta",{"property":"og:description","content":"Here you can find most common questions and problems. LIMIT of OFFSET isn't working The main problem is PostgreSQL expects LIMIT and OFFSET to be BIGINT type but when you pass p..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-09T13:56:49.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-09T13:56:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Frequently asked questions\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-09T13:56:49.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"LIMIT of OFFSET isn't working","slug":"limit-of-offset-isn-t-working","link":"#limit-of-offset-isn-t-working","children":[]},{"level":3,"title":"WHERE IN clause isn't working","slug":"where-in-clause-isn-t-working","link":"#where-in-clause-isn-t-working","children":[]},{"level":3,"title":"Wrong binary data","slug":"wrong-binary-data","link":"#wrong-binary-data","children":[]},{"level":3,"title":"Cannot insert empty ARRAY","slug":"cannot-insert-empty-array","link":"#cannot-insert-empty-array","children":[]}],"git":{"createdTime":1739109409000,"updatedTime":1739109409000,"contributors":[{"name":"chandr-andr (Kiselev Aleksandr)","email":"chandr@chandr.net","commits":1}]},"filePathRelative":"faq.md","localizedDate":"February 9, 2025","autoDesc":true,"excerpt":"<p>Here you can find most common questions and problems.</p>\\n<h3>LIMIT of OFFSET isn't working</h3>\\n<p>The main problem is PostgreSQL expects <code>LIMIT</code> and <code>OFFSET</code> to be BIGINT type but when you pass python <code>int</code> into <code>parameters</code> it converts to <code>INTEGER</code>.</p>"}`);export{b as comp,y as data};
