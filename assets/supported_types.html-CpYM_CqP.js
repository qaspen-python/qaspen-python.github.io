import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as s,d as n,e,b as a,w as o,r as l,o as c}from"./app-D8Yu_QJL.js";const u={},y={class:"hint-container important"},g={href:"https://github.com/pgvector/pgvector",target:"_blank",rel:"noopener noreferrer"};function x(m,t){const d=l("ExternalLinkIcon"),r=l("RouteLink");return c(),p("div",null,[t[11]||(t[11]=s('<h2 id="simple-type" tabindex="-1"><a class="header-anchor" href="#simple-type"><span>Simple Type</span></a></h2><p>Here you can find all types supported by <code>PSQLPy</code>. If PSQLPy isn&#39;t <code>-</code>, you can go to the <code>Extra Types</code> for more information.</p><table><thead><tr><th style="text-align:center;">Python type</th><th style="text-align:center;">PSQLPy extra type</th><th style="text-align:center;">PostgreSQL Type</th></tr></thead><tbody><tr><td style="text-align:center;">None</td><td style="text-align:center;">-</td><td style="text-align:center;">NULL</td></tr><tr><td style="text-align:center;">bool</td><td style="text-align:center;">-</td><td style="text-align:center;">BOOL</td></tr><tr><td style="text-align:center;">bytes</td><td style="text-align:center;">-</td><td style="text-align:center;">BYTEA</td></tr><tr><td style="text-align:center;">str</td><td style="text-align:center;">-</td><td style="text-align:center;">VARCHAR</td></tr><tr><td style="text-align:center;">str</td><td style="text-align:center;">VarChar</td><td style="text-align:center;">VARCHAR</td></tr><tr><td style="text-align:center;">str</td><td style="text-align:center;">Text</td><td style="text-align:center;">TEXT</td></tr><tr><td style="text-align:center;">str</td><td style="text-align:center;">-</td><td style="text-align:center;">XML</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">SmallInt</td><td style="text-align:center;">SMALLINT</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">INTEGER</td><td style="text-align:center;">INTEGER</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">-</td><td style="text-align:center;">INTEGER</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">BIGINT</td><td style="text-align:center;">BIGINT</td></tr><tr><td style="text-align:center;">float</td><td style="text-align:center;">-</td><td style="text-align:center;">FLOAT8</td></tr><tr><td style="text-align:center;">float</td><td style="text-align:center;">Float32</td><td style="text-align:center;">FLOAT4</td></tr><tr><td style="text-align:center;">float</td><td style="text-align:center;">Float64</td><td style="text-align:center;">FLOAT8</td></tr><tr><td style="text-align:center;">datetime.date</td><td style="text-align:center;">-</td><td style="text-align:center;">DATE</td></tr><tr><td style="text-align:center;">datetime.time</td><td style="text-align:center;">-</td><td style="text-align:center;">TIME</td></tr><tr><td style="text-align:center;">datetime.datetime</td><td style="text-align:center;">-</td><td style="text-align:center;">TIMESTAMP</td></tr><tr><td style="text-align:center;">datetime.datetime</td><td style="text-align:center;">-</td><td style="text-align:center;">TIMESTAMPTZ</td></tr><tr><td style="text-align:center;">datetime.timedelta</td><td style="text-align:center;">-</td><td style="text-align:center;">INTERVAL</td></tr><tr><td style="text-align:center;">UUID</td><td style="text-align:center;">-</td><td style="text-align:center;">UUID</td></tr><tr><td style="text-align:center;">dict</td><td style="text-align:center;">-</td><td style="text-align:center;">JSONB</td></tr><tr><td style="text-align:center;">dict</td><td style="text-align:center;">JSONB</td><td style="text-align:center;">JSONB</td></tr><tr><td style="text-align:center;">dict</td><td style="text-align:center;">JSON</td><td style="text-align:center;">JSON</td></tr><tr><td style="text-align:center;">Mac Address 6</td><td style="text-align:center;">MacAddr6</td><td style="text-align:center;">MacAddr</td></tr><tr><td style="text-align:center;">Mac Address 8</td><td style="text-align:center;">MacAddr8</td><td style="text-align:center;">MacAddr</td></tr><tr><td style="text-align:center;">IPv4Address</td><td style="text-align:center;">-</td><td style="text-align:center;">INET</td></tr><tr><td style="text-align:center;">IPv6Address</td><td style="text-align:center;">-</td><td style="text-align:center;">INET</td></tr><tr><td style="text-align:center;">decimal.Decimal</td><td style="text-align:center;">-</td><td style="text-align:center;">NUMERIC</td></tr><tr><td style="text-align:center;">int/str</td><td style="text-align:center;">Money</td><td style="text-align:center;">MONEY</td></tr><tr><td style="text-align:center;">Point</td><td style="text-align:center;">Point</td><td style="text-align:center;">POINT</td></tr><tr><td style="text-align:center;">Box</td><td style="text-align:center;">Box</td><td style="text-align:center;">BOX</td></tr><tr><td style="text-align:center;">Path</td><td style="text-align:center;">Path</td><td style="text-align:center;">PATH</td></tr><tr><td style="text-align:center;">Line</td><td style="text-align:center;">Line</td><td style="text-align:center;">LINE</td></tr><tr><td style="text-align:center;">Line Segment</td><td style="text-align:center;">LineSegment</td><td style="text-align:center;">LSEG</td></tr><tr><td style="text-align:center;">Circle</td><td style="text-align:center;">Circle</td><td style="text-align:center;">CIRCLE</td></tr><tr><td style="text-align:center;">PgVector</td><td style="text-align:center;">PgVector</td><td style="text-align:center;">Vector</td></tr></tbody></table>',3)),n("div",y,[t[5]||(t[5]=n("p",{class:"hint-container-title"},"Important",-1)),n("ul",null,[t[4]||(t[4]=n("li",null,"DECIMAL PostgreSQL type isn't supported, use NUMERIC instead.",-1)),n("li",null,[t[1]||(t[1]=n("code",null,"Vector",-1)),t[2]||(t[2]=e(" type in PostgreSQL can be used only after installation - ")),n("a",g,[t[0]||(t[0]=e("pgvector")),a(d)]),t[3]||(t[3]=e("."))])])]),t[12]||(t[12]=n("h2",{id:"array-type",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#array-type"},[n("span",null,"Array Type")])],-1)),n("p",null,[t[7]||(t[7]=e("You can make arrays with any type of ")),t[8]||(t[8]=n("code",null,"Simple Type",-1)),t[9]||(t[9]=e("s. For better performance and type safety we recommend to use predefined ")),a(r,{to:"/usage/types/array_types.html"},{default:o(()=>t[6]||(t[6]=[e("Array Types")])),_:1}),t[10]||(t[10]=e("."))]),t[13]||(t[13]=s(`<h4 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example:</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test <span class="token punctuation">(</span>arr_of_json JSONB ARRAY<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="composite-type" tabindex="-1"><a class="header-anchor" href="#composite-type"><span>Composite Type</span></a></h2><p><code>PSQLPy</code> supports composite types.</p><p>You can create your own types in PostgreSQL, we will return you <code>dict</code>.</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TYPE</span> custom_type <span class="token keyword">AS</span> <span class="token punctuation">(</span>name <span class="token keyword">VARCHAR</span><span class="token punctuation">,</span> metadata JSONB<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> custom_table <span class="token punctuation">(</span>user_info custom_type<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s insert some data.</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> custom_table <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token keyword">ROW</span><span class="token punctuation">(</span><span class="token string">&#39;Alex&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;{&quot;age&quot;: 50}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Now we can see what result will be returned.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Final

<span class="token keyword">from</span> psqlpy <span class="token keyword">import</span> ConnectionPool<span class="token punctuation">,</span> QueryResult
<span class="token keyword">from</span> psqlpy<span class="token punctuation">.</span>extra_types <span class="token keyword">import</span> SmallInt<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> BigInt


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># It uses default connection parameters</span>
    db_pool<span class="token punctuation">:</span> Final <span class="token operator">=</span> ConnectionPool<span class="token punctuation">(</span><span class="token punctuation">)</span>

    result <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        <span class="token string">&quot;SELECT user_info FROM custom_table&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It will return:</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;user_info&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Alex&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;metadata&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="enum-type" tabindex="-1"><a class="header-anchor" href="#enum-type"><span>Enum Type</span></a></h2><p>You can use ENUM type in <code>PostgreSQL</code> and <code>Python</code>.</p><p>Let&#39;s assume we create <code>Enum</code> <code>Weather</code> and table with it.</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TYPE</span> weather <span class="token keyword">AS</span> <span class="token keyword">ENUM</span> <span class="token punctuation">(</span><span class="token string">&#39;sun&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;not sun&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">CREATE</span> <span class="token keyword">table</span> weather_plus <span class="token punctuation">(</span>is_weather_good weather<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s see how we can INSERT and SELECT such data.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Final

<span class="token keyword">from</span> psqlpy <span class="token keyword">import</span> ConnectionPool<span class="token punctuation">,</span> QueryResult


<span class="token keyword">class</span> <span class="token class-name">Weather</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>
    SUN <span class="token operator">=</span> <span class="token string">&quot;sun&quot;</span>
    NOT_SUN <span class="token operator">=</span> <span class="token string">&quot;not sun&quot;</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># It uses default connection parameters</span>
    db_pool<span class="token punctuation">:</span> Final <span class="token operator">=</span> ConnectionPool<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># Insert new data</span>
    <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        querystring<span class="token operator">=</span><span class="token string">&quot;INSERT INTO weather_plus VALUES($1)&quot;</span><span class="token punctuation">,</span>
        parameters<span class="token operator">=</span><span class="token punctuation">[</span>Weather<span class="token punctuation">.</span>SUN<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>

    <span class="token comment"># Or you can pass string directly</span>
    <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        querystring<span class="token operator">=</span><span class="token string">&quot;INSERT INTO weather_plus VALUES($1)&quot;</span><span class="token punctuation">,</span>
        parameters<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;sun&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>

    result <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        querystring<span class="token operator">=</span><span class="token string">&quot;SELECT * FROM weather_plus&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You will receive:</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;is_weather_good&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sun&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20))])}const b=i(u,[["render",x],["__file","supported_types.html.vue"]]),T=JSON.parse(`{"path":"/usage/types/supported_types.html","title":"Supported Types","lang":"en-US","frontmatter":{"title":"Supported Types","description":"Simple Type Here you can find all types supported by PSQLPy. If PSQLPy isn't -, you can go to the Extra Types for more information. Important DECIMAL PostgreSQL type isn't suppo...","head":[["meta",{"property":"og:url","content":"https://psqlpy-python.github.io/usage/types/supported_types.html"}],["meta",{"property":"og:site_name","content":"PSQLPy"}],["meta",{"property":"og:title","content":"Supported Types"}],["meta",{"property":"og:description","content":"Simple Type Here you can find all types supported by PSQLPy. If PSQLPy isn't -, you can go to the Extra Types for more information. Important DECIMAL PostgreSQL type isn't suppo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-09T13:56:49.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-09T13:56:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Supported Types\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-09T13:56:49.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Simple Type","slug":"simple-type","link":"#simple-type","children":[]},{"level":2,"title":"Array Type","slug":"array-type","link":"#array-type","children":[]},{"level":2,"title":"Composite Type","slug":"composite-type","link":"#composite-type","children":[]},{"level":2,"title":"Enum Type","slug":"enum-type","link":"#enum-type","children":[]}],"git":{"createdTime":1739109409000,"updatedTime":1739109409000,"contributors":[{"name":"chandr-andr (Kiselev Aleksandr)","email":"chandr@chandr.net","commits":1}]},"filePathRelative":"usage/types/supported_types.md","localizedDate":"February 9, 2025","autoDesc":true,"excerpt":"<h2>Simple Type</h2>\\n<p>Here you can find all types supported by <code>PSQLPy</code>. If PSQLPy isn't <code>-</code>, you can go to the <code>Extra Types</code> for more information.</p>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:center\\">Python type</th>\\n<th style=\\"text-align:center\\">PSQLPy extra type</th>\\n<th style=\\"text-align:center\\">PostgreSQL Type</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:center\\">None</td>\\n<td style=\\"text-align:center\\">-</td>\\n<td style=\\"text-align:center\\">NULL</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">bool</td>\\n<td style=\\"text-align:center\\">-</td>\\n<td style=\\"text-align:center\\">BOOL</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">bytes</td>\\n<td style=\\"text-align:center\\">-</td>\\n<td style=\\"text-align:center\\">BYTEA</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">str</td>\\n<td style=\\"text-align:center\\">-</td>\\n<td style=\\"text-align:center\\">VARCHAR</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">str</td>\\n<td style=\\"text-align:center\\">VarChar</td>\\n<td style=\\"text-align:center\\">VARCHAR</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">str</td>\\n<td style=\\"text-align:center\\">Text</td>\\n<td style=\\"text-align:center\\">TEXT</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">str</td>\\n<td style=\\"text-align:center\\">-</td>\\n<td style=\\"text-align:center\\">XML</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">int</td>\\n<td style=\\"text-align:center\\">SmallInt</td>\\n<td style=\\"text-align:center\\">SMALLINT</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">int</td>\\n<td style=\\"text-align:center\\">INTEGER</td>\\n<td style=\\"text-align:center\\">INTEGER</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">int</td>\\n<td style=\\"text-align:center\\">-</td>\\n<td style=\\"text-align:center\\">INTEGER</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">int</td>\\n<td style=\\"text-align:center\\">BIGINT</td>\\n<td style=\\"text-align:center\\">BIGINT</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">float</td>\\n<td style=\\"text-align:center\\">-</td>\\n<td style=\\"text-align:center\\">FLOAT8</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">float</td>\\n<td style=\\"text-align:center\\">Float32</td>\\n<td style=\\"text-align:center\\">FLOAT4</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">float</td>\\n<td style=\\"text-align:center\\">Float64</td>\\n<td style=\\"text-align:center\\">FLOAT8</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">datetime.date</td>\\n<td style=\\"text-align:center\\">-</td>\\n<td style=\\"text-align:center\\">DATE</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">datetime.time</td>\\n<td style=\\"text-align:center\\">-</td>\\n<td style=\\"text-align:center\\">TIME</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">datetime.datetime</td>\\n<td style=\\"text-align:center\\">-</td>\\n<td style=\\"text-align:center\\">TIMESTAMP</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">datetime.datetime</td>\\n<td style=\\"text-align:center\\">-</td>\\n<td style=\\"text-align:center\\">TIMESTAMPTZ</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">datetime.timedelta</td>\\n<td style=\\"text-align:center\\">-</td>\\n<td style=\\"text-align:center\\">INTERVAL</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">UUID</td>\\n<td style=\\"text-align:center\\">-</td>\\n<td style=\\"text-align:center\\">UUID</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">dict</td>\\n<td style=\\"text-align:center\\">-</td>\\n<td style=\\"text-align:center\\">JSONB</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">dict</td>\\n<td style=\\"text-align:center\\">JSONB</td>\\n<td style=\\"text-align:center\\">JSONB</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">dict</td>\\n<td style=\\"text-align:center\\">JSON</td>\\n<td style=\\"text-align:center\\">JSON</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Mac Address 6</td>\\n<td style=\\"text-align:center\\">MacAddr6</td>\\n<td style=\\"text-align:center\\">MacAddr</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Mac Address 8</td>\\n<td style=\\"text-align:center\\">MacAddr8</td>\\n<td style=\\"text-align:center\\">MacAddr</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">IPv4Address</td>\\n<td style=\\"text-align:center\\">-</td>\\n<td style=\\"text-align:center\\">INET</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">IPv6Address</td>\\n<td style=\\"text-align:center\\">-</td>\\n<td style=\\"text-align:center\\">INET</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">decimal.Decimal</td>\\n<td style=\\"text-align:center\\">-</td>\\n<td style=\\"text-align:center\\">NUMERIC</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">int/str</td>\\n<td style=\\"text-align:center\\">Money</td>\\n<td style=\\"text-align:center\\">MONEY</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Point</td>\\n<td style=\\"text-align:center\\">Point</td>\\n<td style=\\"text-align:center\\">POINT</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Box</td>\\n<td style=\\"text-align:center\\">Box</td>\\n<td style=\\"text-align:center\\">BOX</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Path</td>\\n<td style=\\"text-align:center\\">Path</td>\\n<td style=\\"text-align:center\\">PATH</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Line</td>\\n<td style=\\"text-align:center\\">Line</td>\\n<td style=\\"text-align:center\\">LINE</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Line Segment</td>\\n<td style=\\"text-align:center\\">LineSegment</td>\\n<td style=\\"text-align:center\\">LSEG</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Circle</td>\\n<td style=\\"text-align:center\\">Circle</td>\\n<td style=\\"text-align:center\\">CIRCLE</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">PgVector</td>\\n<td style=\\"text-align:center\\">PgVector</td>\\n<td style=\\"text-align:center\\">Vector</td>\\n</tr>\\n</tbody>\\n</table>"}`);export{b as comp,T as data};
