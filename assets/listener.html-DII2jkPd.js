import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,d as n,b as l,a as d,e as s,w as e,r as c,o as k}from"./app-D8Yu_QJL.js";const b={},m={href:"https://www.postgresql.org/docs/current/sql-listen.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.postgresql.org/docs/current/sql-notify.html",target:"_blank",rel:"noopener noreferrer"};function h(y,a){const p=c("ExternalLinkIcon"),i=c("Tabs");return k(),u("div",null,[n("p",null,[a[2]||(a[2]=n("code",null,"Listener",-1)),a[3]||(a[3]=s(" object allows users to work with ")),n("a",m,[a[0]||(a[0]=s("LISTEN")),l(p)]),a[4]||(a[4]=s("/")),n("a",v,[a[1]||(a[1]=s("NOTIFY")),l(p)]),a[5]||(a[5]=s(" functionality."))]),a[10]||(a[10]=n("h2",{id:"usage",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#usage"},[n("span",null,"Usage")])],-1)),a[11]||(a[11]=n("p",null,[s("There are two ways of using "),n("code",null,"Listener"),s(" object:")],-1)),a[12]||(a[12]=n("ul",null,[n("li",null,"Async iterator"),n("li",null,"Background task")],-1)),l(i,{id:"21",data:[{id:"Background task"},{id:"Async Iterator"}]},{title0:e(({value:t,isActive:o})=>a[6]||(a[6]=[s("Background task")])),title1:e(({value:t,isActive:o})=>a[7]||(a[7]=[s("Async Iterator")])),tab0:e(({value:t,isActive:o})=>a[8]||(a[8]=[n("div",{class:"language-python line-numbers-mode","data-ext":"py","data-title":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"from"),s(" psqlpy "),n("span",{class:"token keyword"},"import"),s(" ConnectionPool"),n("span",{class:"token punctuation"},","),s(" Connection"),n("span",{class:"token punctuation"},","),s(` Listener


db_pool `),n("span",{class:"token operator"},"="),s(" ConnectionPool"),n("span",{class:"token punctuation"},"("),s(`
    dsn`),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"postgres://postgres:postgres@localhost:5432/postgres"'),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"test_channel_callback"),n("span",{class:"token punctuation"},"("),s(`
    connection`),n("span",{class:"token punctuation"},":"),s(" Connection"),n("span",{class:"token punctuation"},","),s(`
    payload`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token builtin"},"str"),n("span",{class:"token punctuation"},","),s(`
    channel`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token builtin"},"str"),n("span",{class:"token punctuation"},","),s(`
    process_id`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token boolean"},"None"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token comment"},"# do some important staff"),s(`
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`

`),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token boolean"},"None"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token comment"},"# Create listener object"),s(`
    listener`),n("span",{class:"token punctuation"},":"),s(" Listener "),n("span",{class:"token operator"},"="),s(" db_pool"),n("span",{class:"token punctuation"},"."),s("listener"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

    `),n("span",{class:"token comment"},"# Add channel to listen and callback for it."),s(`
    `),n("span",{class:"token keyword"},"await"),s(" listener"),n("span",{class:"token punctuation"},"."),s("add_callback"),n("span",{class:"token punctuation"},"("),s(`
        channel`),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"test_channel"'),n("span",{class:"token punctuation"},","),s(`
        callback`),n("span",{class:"token operator"},"="),s("test_channel_callback"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},")"),s(`

    `),n("span",{class:"token comment"},"# Startup the listener"),s(`
    `),n("span",{class:"token keyword"},"await"),s(" listener"),n("span",{class:"token punctuation"},"."),s("startup"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

    `),n("span",{class:"token comment"},"# Start listening."),s(`
    `),n("span",{class:"token comment"},"# `listen` method isn't blocking, it returns None and starts background"),s(`
    `),n("span",{class:"token comment"},"# task in the Rust event loop."),s(`
    listener`),n("span",{class:"token punctuation"},"."),s("listen"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

    `),n("span",{class:"token comment"},"# You can stop listening."),s(`
    listener`),n("span",{class:"token punctuation"},"."),s("abort_listen"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:o})=>a[9]||(a[9]=[n("div",{class:"language-python line-numbers-mode","data-ext":"py","data-title":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"from"),s(" psqlpy "),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"("),s(`
    ConnectionPool`),n("span",{class:"token punctuation"},","),s(`
    Connection`),n("span",{class:"token punctuation"},","),s(`
    Listener`),n("span",{class:"token punctuation"},","),s(`
    ListenerNotificationMsg`),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},")"),s(`


db_pool `),n("span",{class:"token operator"},"="),s(" ConnectionPool"),n("span",{class:"token punctuation"},"("),s(`
    dsn`),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"postgres://postgres:postgres@localhost:5432/postgres"'),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token boolean"},"None"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token comment"},"# Create listener object"),s(`
    listener`),n("span",{class:"token punctuation"},":"),s(" Listener "),n("span",{class:"token operator"},"="),s(" db_pool"),n("span",{class:"token punctuation"},"."),s("listener"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

    `),n("span",{class:"token comment"},"# Startup the listener"),s(`
    `),n("span",{class:"token keyword"},"await"),s(" listener"),n("span",{class:"token punctuation"},"."),s("startup"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

    listener_msg`),n("span",{class:"token punctuation"},":"),s(` ListenerNotificationMsg
    `),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token keyword"},"for"),s(" listener_msg "),n("span",{class:"token keyword"},"in"),s(" listener"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("listener_msg"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[13]||(a[13]=d(`<h2 id="listener-attributes" tabindex="-1"><a class="header-anchor" href="#listener-attributes"><span>Listener attributes</span></a></h2><ul><li><p><code>connection</code>: Instance of <code>Connection</code>. If <code>startup</code> wasn&#39;t called, raises <code>ListenerStartError</code>.</p></li><li><p><code>is_started</code>: Flag that shows whether the <code>Listener</code> is running or not.</p></li></ul><h2 id="listener-methods" tabindex="-1"><a class="header-anchor" href="#listener-methods"><span>Listener methods</span></a></h2><h3 id="startup" tabindex="-1"><a class="header-anchor" href="#startup"><span>Startup</span></a></h3><p>Startup <code>Listener</code> instance and can be called once or again only after <code>shutdown</code>.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p><code>Listener</code> must be started up.</p></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    listener<span class="token punctuation">:</span> Listener <span class="token operator">=</span> db_pool<span class="token punctuation">.</span>listener<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> listener<span class="token punctuation">.</span>startup<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="shutdown" tabindex="-1"><a class="header-anchor" href="#shutdown"><span>Shutdown</span></a></h3><p>Abort listen (if called) and release underlying connection.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    listener<span class="token punctuation">:</span> Listener <span class="token operator">=</span> db_pool<span class="token punctuation">.</span>listener<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> listener<span class="token punctuation">.</span>startup<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> listener<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="add-callback" tabindex="-1"><a class="header-anchor" href="#add-callback"><span>Add Callback</span></a></h3><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters:</span></a></h4><ul><li><code>channel</code>: name of the channel to listen.</li><li><code>callback</code>: coroutine callback.</li></ul><p>Add new callback to the channel, can be called multiple times (before or after <code>listen</code>).</p><p>Callback signature is like this:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> psqlpy <span class="token keyword">import</span> Connection

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>
    connection<span class="token punctuation">:</span> Connection<span class="token punctuation">,</span>
    payload<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
    channel<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
    process_id<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Parameters for callback are based like <code>args</code>, so this signature is correct to:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>
    connection<span class="token punctuation">:</span> Connection<span class="token punctuation">,</span>
    <span class="token operator">*</span>args<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example:</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">test_channel_callback</span><span class="token punctuation">(</span>
    connection<span class="token punctuation">:</span> Connection<span class="token punctuation">,</span>
    payload<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
    channel<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
    process_id<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    listener <span class="token operator">=</span> db_pool<span class="token punctuation">.</span>listener<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> listener<span class="token punctuation">.</span>add_callback<span class="token punctuation">(</span>
        channel<span class="token operator">=</span><span class="token string">&quot;test_channel&quot;</span><span class="token punctuation">,</span>
        callback<span class="token operator">=</span>test_channel_callback<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="clear-channel-callbacks" tabindex="-1"><a class="header-anchor" href="#clear-channel-callbacks"><span>Clear Channel Callbacks</span></a></h3><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters:</span></a></h4><ul><li><code>channel</code>: name of the channel</li></ul><p>Remove all callbacks for the channel</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    listener <span class="token operator">=</span> db_pool<span class="token punctuation">.</span>listener<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> listener<span class="token punctuation">.</span>clear_channel_callbacks<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="clear-all-channels" tabindex="-1"><a class="header-anchor" href="#clear-all-channels"><span>Clear All Channels</span></a></h3><p>Clear all channels and callbacks.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    listener <span class="token operator">=</span> db_pool<span class="token punctuation">.</span>listener<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> listener<span class="token punctuation">.</span>clear_all_channels<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="listen" tabindex="-1"><a class="header-anchor" href="#listen"><span>Listen</span></a></h3><p>Start listening.</p><p>It&#39;s a non-blocking operation. In the background it creates task in Rust event loop.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    listener <span class="token operator">=</span> db_pool<span class="token punctuation">.</span>listener<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> listener<span class="token punctuation">.</span>startup<span class="token punctuation">(</span><span class="token punctuation">)</span>
    listener<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="abort-listen" tabindex="-1"><a class="header-anchor" href="#abort-listen"><span>Abort Listen</span></a></h3><p>Abort listen. If <code>listen()</code> method was called, stop listening, else don&#39;t do anything.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    listener <span class="token operator">=</span> db_pool<span class="token punctuation">.</span>listener<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> listener<span class="token punctuation">.</span>startup<span class="token punctuation">(</span><span class="token punctuation">)</span>
    listener<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token punctuation">)</span>
    listener<span class="token punctuation">.</span>abort_listen<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35))])}const f=r(b,[["render",h],["__file","listener.html.vue"]]),L=JSON.parse('{"path":"/components/listener.html","title":"Listener","lang":"en-US","frontmatter":{"title":"Listener","description":"Listener object allows users to work with LISTEN/NOTIFY functionality. Usage There are two ways of using Listener object: Async iterator Background task Listener attributes conn...","head":[["meta",{"property":"og:url","content":"https://psqlpy-python.github.io/components/listener.html"}],["meta",{"property":"og:site_name","content":"PSQLPy"}],["meta",{"property":"og:title","content":"Listener"}],["meta",{"property":"og:description","content":"Listener object allows users to work with LISTEN/NOTIFY functionality. Usage There are two ways of using Listener object: Async iterator Background task Listener attributes conn..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-09T13:56:49.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-09T13:56:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Listener\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-09T13:56:49.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Usage","slug":"usage","link":"#usage","children":[]},{"level":2,"title":"Listener attributes","slug":"listener-attributes","link":"#listener-attributes","children":[]},{"level":2,"title":"Listener methods","slug":"listener-methods","link":"#listener-methods","children":[{"level":3,"title":"Startup","slug":"startup","link":"#startup","children":[]},{"level":3,"title":"Shutdown","slug":"shutdown","link":"#shutdown","children":[]},{"level":3,"title":"Add Callback","slug":"add-callback","link":"#add-callback","children":[]},{"level":3,"title":"Clear Channel Callbacks","slug":"clear-channel-callbacks","link":"#clear-channel-callbacks","children":[]},{"level":3,"title":"Clear All Channels","slug":"clear-all-channels","link":"#clear-all-channels","children":[]},{"level":3,"title":"Listen","slug":"listen","link":"#listen","children":[]},{"level":3,"title":"Abort Listen","slug":"abort-listen","link":"#abort-listen","children":[]}]}],"git":{"createdTime":1739109409000,"updatedTime":1739109409000,"contributors":[{"name":"chandr-andr (Kiselev Aleksandr)","email":"chandr@chandr.net","commits":1}]},"filePathRelative":"components/listener.md","localizedDate":"February 9, 2025","autoDesc":true,"excerpt":"<p><code>Listener</code> object allows users to work with <a href=\\"https://www.postgresql.org/docs/current/sql-listen.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LISTEN</a>/<a href=\\"https://www.postgresql.org/docs/current/sql-notify.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">NOTIFY</a> functionality.</p>"}');export{f as comp,L as data};
