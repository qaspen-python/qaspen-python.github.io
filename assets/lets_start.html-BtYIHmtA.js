import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,d as t,b as r,a as c,w as s,r as u,o as d,e as a}from"./app-D8Yu_QJL.js";const m={};function y(k,n){const o=u("Tabs");return d(),p("div",null,[n[6]||(n[6]=t("h2",{id:"installation",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#installation"},[t("span",null,"Installation")])],-1)),n[7]||(n[7]=t("p",null,"You can install psqlpy with pip, poetry or directly from git using pip:",-1)),r(o,{id:"6",data:[{id:"pip"},{id:"poetry"},{id:"git"}]},{title0:s(({value:e,isActive:i})=>n[0]||(n[0]=[a("pip")])),title1:s(({value:e,isActive:i})=>n[1]||(n[1]=[a("poetry")])),title2:s(({value:e,isActive:i})=>n[2]||(n[2]=[a("git")])),tab0:s(({value:e,isActive:i})=>n[3]||(n[3]=[t("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[t("pre",{class:"language-bash"},[t("code",null,[a("pip "),t("span",{class:"token function"},"install"),a(` psqlpy
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"})])],-1)])),tab1:s(({value:e,isActive:i})=>n[4]||(n[4]=[t("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[t("pre",{class:"language-bash"},[t("code",null,[a("poetry "),t("span",{class:"token function"},"add"),a(` psqlpy
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"})])],-1)])),tab2:s(({value:e,isActive:i})=>n[5]||(n[5]=[t("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[t("pre",{class:"language-bash"},[t("code",null,[a("pip "),t("span",{class:"token function"},"install"),a(` git+https://github.com/psqlpy-python/psqlpy
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"})])],-1)])),_:1}),n[8]||(n[8]=c(`<p>After installation you are ready to start querying!</p><h2 id="first-request-to-the-database" tabindex="-1"><a class="header-anchor" href="#first-request-to-the-database"><span>First request to the database</span></a></h2><p>There is a minimal example of what you need to do to send your first query and receive result. Let&#39;s assume that we have table <code>users</code>:</p><table><thead><tr><th style="text-align:center;">id</th><th style="text-align:center;">name</th><th style="text-align:center;">username</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">Aleksandr</td><td style="text-align:center;">chandr-andr</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">Michail</td><td style="text-align:center;">insani7y</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Final<span class="token punctuation">,</span> Any

<span class="token keyword">from</span> psqlpy <span class="token keyword">import</span> ConnectionPool<span class="token punctuation">,</span> QueryResult


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># It uses default connection parameters</span>
    db_pool<span class="token punctuation">:</span> Final <span class="token operator">=</span> ConnectionPool<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">async</span> <span class="token keyword">with</span> db_pool<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>
        results<span class="token punctuation">:</span> Final<span class="token punctuation">[</span>QueryResult<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> conn<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
            <span class="token string">&quot;SELECT * FROM users WHERE id = $1&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>

    dict_results<span class="token punctuation">:</span> Final<span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">[</span>Any<span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> results<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span>
    db_pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>It&#39;s better to call <code>close()</code> on database pool when you application is shutting down.</p></div>`,6))])}const b=l(m,[["render",y],["__file","lets_start.html.vue"]]),g=JSON.parse(`{"path":"/introduction/lets_start.html","title":"Let's Start","lang":"en-US","frontmatter":{"title":"Let's Start","description":"Installation You can install psqlpy with pip, poetry or directly from git using pip: After installation you are ready to start querying! First request to the database There is a...","head":[["meta",{"property":"og:url","content":"https://psqlpy-python.github.io/introduction/lets_start.html"}],["meta",{"property":"og:site_name","content":"PSQLPy"}],["meta",{"property":"og:title","content":"Let's Start"}],["meta",{"property":"og:description","content":"Installation You can install psqlpy with pip, poetry or directly from git using pip: After installation you are ready to start querying! First request to the database There is a..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-09T13:56:49.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-09T13:56:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Let's Start\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-09T13:56:49.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Installation","slug":"installation","link":"#installation","children":[]},{"level":2,"title":"First request to the database","slug":"first-request-to-the-database","link":"#first-request-to-the-database","children":[]}],"git":{"createdTime":1739109409000,"updatedTime":1739109409000,"contributors":[{"name":"chandr-andr (Kiselev Aleksandr)","email":"chandr@chandr.net","commits":1}]},"filePathRelative":"introduction/lets_start.md","localizedDate":"February 9, 2025","autoDesc":true,"excerpt":"<h2>Installation</h2>\\n<p>You can install psqlpy with pip, poetry or directly from git using pip:</p>\\n\\n<p>After installation you are ready to start querying!</p>\\n<h2>First request to the database</h2>\\n<p>There is a minimal example of what you need to do to send your first query and receive result.\\nLet's assume that we have table <code>users</code>:</p>"}`);export{b as comp,g as data};
