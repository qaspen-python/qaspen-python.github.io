import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as t,a as r,e as n,b as o,r as l,o as d}from"./app-D8Yu_QJL.js";const p={},u={href:"https://github.com/psqlpy-python/psqlpy/discussions",target:"_blank",rel:"noopener noreferrer"},c={href:"https://www.rust-lang.org/tools/install",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.maturin.rs/installation",target:"_blank",rel:"noopener noreferrer"};function h(g,e){const s=l("ExternalLinkIcon");return d(),i("div",null,[e[9]||(e[9]=t("p",null,"We love contributions. This guide is for all fellas who want to make psqlpy better together.",-1)),e[10]||(e[10]=t("p",null,"There are several rules for contributors:",-1)),e[11]||(e[11]=t("ul",null,[t("li",null,"Please do not add malware."),t("li",null,"Please make sure that your request solves the problem.")],-1)),t("p",null,[e[1]||(e[1]=n("If you struggle with something or feel frustrated, you either create an issue, create a ")),t("a",u,[e[0]||(e[0]=n("discussions")),o(s)]),e[2]||(e[2]=n(". page or publish a draft PR and ask your question in the description."))]),e[12]||(e[12]=t("p",null,"We have lots of tests in CI. But since CI runs from first-time contributors should be approved, you better test locally. It just takes less time to prepare PR for merging.",-1)),e[13]||(e[13]=t("h2",{id:"setting-up-environment",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#setting-up-environment"},[t("span",null,"Setting up environment")])],-1)),t("p",null,[e[4]||(e[4]=n("Since it's rust-first project you need to install rust on your computer. The best way to do it is check ")),t("a",c,[e[3]||(e[3]=n("official site")),o(s)]),e[5]||(e[5]=n("."))]),t("p",null,[e[7]||(e[7]=n("After you install rust, you must prepare you python environment. One of the best ways is follow ")),t("a",m,[e[6]||(e[6]=n("maturin offical documentation")),o(s)]),e[8]||(e[8]=n(" but below you can find all necessary commands."))]),e[14]||(e[14]=r(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> python3 <span class="token parameter variable">-m</span> venv .venv
<span class="token operator">&gt;</span> <span class="token builtin class-name">source</span> .venv/bin/activate
<span class="token operator">&gt;</span> pip <span class="token function">install</span> <span class="token parameter variable">-U</span> pip maturin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then you need to build <code>PSQLPy</code> project.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>maturin develop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>After this step project is built and installed in your python environment you created in previous step.</p><h2 id="linting-and-type-checking" tabindex="-1"><a class="header-anchor" href="#linting-and-type-checking"><span>Linting and type checking</span></a></h2><p>We have pre-commit configured with all our settings. We highly recommend you to install it as a git hook using pre-commit install command.</p><p>But even without installation, you can run all lints manually:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pre-commit run <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="testing" tabindex="-1"><a class="header-anchor" href="#testing"><span>Testing</span></a></h2><p>You need to have <code>PostgreSQL</code> server somewhere to run <code>pytest</code>.</p><p>Default credentials for testing <code>PostgreSQL</code> and you can configure it with env:</p><ul><li>host: <code>localhost</code> (env: POSTGRES_HOST)</li><li>user: <code>postgres</code> (env: POSTGRES_USER)</li><li>password: <code>postgres</code> (env: POSTGRES_PASSWORD)</li><li>port: <code>5432</code> (env: POSTGRES_PORT)</li><li>dbname: <code>psqlpy_test</code> (env: POSTGRES_DBNAME)</li></ul><p>We have tests with required SSL mode, so, if you don&#39;t want to run PostgreSQL in SSL mode, you could run</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">--ignore</span><span class="token operator">=</span><span class="token string">&quot;./python/tests/test_ssl_mode.py&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you have PostgreSQL with enabled ssl mode, you need to set path to your <code>ca_file</code> in <code>POSTGRES_CERT_FILE</code> env. And run</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pytest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,16))])}const y=a(p,[["render",h],["__file","contribute.html.vue"]]),f=JSON.parse('{"path":"/contribute.html","title":"Contribution guide","lang":"en-US","frontmatter":{"title":"Contribution guide","description":"We love contributions. This guide is for all fellas who want to make psqlpy better together. There are several rules for contributors: Please do not add malware. Please make sur...","head":[["meta",{"property":"og:url","content":"https://psqlpy-python.github.io/contribute.html"}],["meta",{"property":"og:site_name","content":"PSQLPy"}],["meta",{"property":"og:title","content":"Contribution guide"}],["meta",{"property":"og:description","content":"We love contributions. This guide is for all fellas who want to make psqlpy better together. There are several rules for contributors: Please do not add malware. Please make sur..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-09T13:56:49.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-09T13:56:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Contribution guide\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-09T13:56:49.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Setting up environment","slug":"setting-up-environment","link":"#setting-up-environment","children":[]},{"level":2,"title":"Linting and type checking","slug":"linting-and-type-checking","link":"#linting-and-type-checking","children":[]},{"level":2,"title":"Testing","slug":"testing","link":"#testing","children":[]}],"git":{"createdTime":1739109409000,"updatedTime":1739109409000,"contributors":[{"name":"chandr-andr (Kiselev Aleksandr)","email":"chandr@chandr.net","commits":1}]},"filePathRelative":"contribute.md","localizedDate":"February 9, 2025","autoDesc":true,"excerpt":"<p>We love contributions. This guide is for all fellas who want to make psqlpy better together.</p>\\n<p>There are several rules for contributors:</p>\\n<ul>\\n<li>Please do not add malware.</li>\\n<li>Please make sure that your request solves the problem.</li>\\n</ul>\\n<p>If you struggle with something or feel frustrated, you either create an issue, create a <a href=\\"https://github.com/psqlpy-python/psqlpy/discussions\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">discussions</a>. page or publish a draft PR and ask your question in the description.</p>"}');export{y as comp,f as data};
